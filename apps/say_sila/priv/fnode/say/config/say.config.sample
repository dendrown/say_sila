{
  :erlang
    {:cookie        "say_cookie"
     :sname         "say"}

  ;; -------------------------------------------------------------------------
  :sila
    {:data              {:tag       :env
                         :tracker   :all
                         :source    :tweets
                         :dir       "resources/emo-sa"}
     :foaf?              false                  ; Link to equivalent FOAF classes
     :wordnet-dir       "/opt/wordnet/dict/"}   ; Location of WordNet dictionary

  ;; -------------------------------------------------------------------------
  :emote
    {:nlp               :english                ; Options: affective|english
     :id-index          1                       ; ARFF indices are 1-based
     :screen-name-index 3
     :full-name-index   4
     :description-index 5
     :text-index        6
     :target            "sentiment"}

  :dolce
    {:access            :minimal}               ; Options: import|hierarchy|minimal

  :cmu-pos
    {:dproperties?      false                   ; Include optional data (sub) properties (pos:hasPartOfSpeechTag)
     :oproperties?      false                   ; Include optional object (sub) properties (pos:isPartOfSpeech)
     :ignore            #{"," "~"}}

  :senti
    {:all-data?         true                    ; Use complete dataset (vs. a manageable subset)
     :balance?          false                   ; Equal representation for pos/neg classes
     :links?            true                    ; Include ordering of Tokens (must be on for full-links)
     :full-links?       false                   ; Create all links explicitly rather than depending on reasoner
     :oproperties?      false                   ; Include optional object (sub) properties (senti:denotesAffect)
     :skip-neutrals?    false                   ; Do not include Texts that have no terms expressing sentiment/emotion
     :use-scr?          false                   ; Model Bing Liu's Sentiment Composition Rules
     :use-tweebo?       false                   ; Tweebo Parser dependency trees for tweets
     :rand-seed         12345                   ; Seed an RNG for Weka dataset handling
     :shuffle-data?     true                    ; Randomize Weka input data instances
     :learn-cap         1                       ; Number of top learned rules to retain (per iteration)
     :lexicon           :liu                    ; Options: liu|mpqa|nrc|swn
     :system            :plutchik               ; Base emotion system: plutchik|Ekman|nil
     :secondaries?      false                   ; Construct secondary emotions from primary (for Plutchik's theory)
     :surveys           #{}                     ; DEPRECATED: Look for links in the specified survey(s)
     :data-split        {:iterate?      true    ; Learn in steps through subset of the data
                         :datasets      10
                         :train         1000
                         :test          1000
                         :parts         10
                         :rand-seed     24816}
     :num-instances     1000                    ; We may need extra Weka instances to balance classes
     :num-examples      1000}                   ; Use a subset until we get everything squared away


  ;; -------------------------------------------------------------------------
  :dllearner                                    ; EXTERNAL TOOL: DL-Learner
    {:exec              "/usr/local/bin/dll"
     :reasoner          :cwa                    ; Use open/closed world assumption (owa|cwa)

     ;; DL-Learner base configuration
     :alg               {:type                      :ocel                   ; Invokes config submap (below)
                         :maxExecutionTimeInSeconds 300
                         :noisePercentage           33
                         :startClass                "senti:PositiveTextCandidate"
                         :ignoredConcepts           ["senti:SentimentPolarity"]
                         :ignoredObjectProperties   ["dul:associatedWith"
                                                     "dul:hasPart"
                                                     "dul:hasQuality"]}
     :lp                {:type                      "posNegStandard"}
     :op                {:type                      "rho"
                         :useCardinalityRestrictions false}

     ;; Reasoner submaps handle Open-World vs. Closed-World assumptions
     :cwa               {:type                      "Closed World Reasoner"}
     :owa               {:type                      "OWL API Reasoner"
                         :reasonerImplementation    "hermit"}               ; Options: hermit|pellet

     ;; Algorithm submaps contain 'alg' configuration elelements which depend on :alg -> :type
     :ocel              {}
     :celoe             {:maxNrOfResults            10}}

  ;; -------------------------------------------------------------------------
  :survey
    {:survey            :sassy                  ; Active survey for checking profiles/tweets
     :min-chart-hits    5}                      ; Mininimum hit frequency to be included in report chart
}
;;; vim: ft=clojure:
